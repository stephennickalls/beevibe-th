BEGIN;

-- Extensions you likely already have on Supabase; keep here for safety.
CREATE EXTENSION IF NOT EXISTS "pgcrypto";
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- ===========
-- Core domain
-- ===========

-- Apiaries are locations owned by a user
CREATE TABLE IF NOT EXISTS public.apiaries (
  id                integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  uuid              uuid NOT NULL DEFAULT gen_random_uuid() UNIQUE,
  name              varchar NOT NULL,
  description       text,
  latitude          numeric,
  longitude         numeric,
  address           text,
  installation_date date DEFAULT CURRENT_DATE,
  is_active         boolean DEFAULT true,
  user_id           uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  created_by        uuid REFERENCES auth.users(id),
  created_at        timestamptz DEFAULT now(),
  updated_at        timestamptz DEFAULT now()
);

CREATE INDEX IF NOT EXISTS apiaries_user_idx ON public.apiaries(user_id);

-- Hives live in an apiary
CREATE TABLE IF NOT EXISTS public.hives (
  id                integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  uuid              uuid NOT NULL DEFAULT gen_random_uuid() UNIQUE,
  apiary_id         integer NOT NULL REFERENCES public.apiaries(id) ON DELETE CASCADE,
  name              varchar NOT NULL,
  description       text,
  installation_date date DEFAULT CURRENT_DATE,
  is_active         boolean DEFAULT true,
  user_id           uuid REFERENCES auth.users(id),
  created_by        uuid REFERENCES auth.users(id),
  created_at        timestamptz DEFAULT now(),
  updated_at        timestamptz DEFAULT now()
);

CREATE INDEX IF NOT EXISTS hives_apiary_idx ON public.hives(apiary_id);
CREATE INDEX IF NOT EXISTS hives_user_idx   ON public.hives(user_id);

-- ===========
-- Devices
-- ===========

-- Apiary Hub: LilyGO ESP32 modem/gateway for an apiary
CREATE TABLE IF NOT EXISTS public.apiary_hubs (
  id               integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  uuid             uuid NOT NULL DEFAULT gen_random_uuid() UNIQUE,
  apiary_id        integer NOT NULL REFERENCES public.apiaries(id) ON DELETE CASCADE,
  user_id          uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  name             varchar NOT NULL,
  description      text,
  last_seen        timestamptz,
  firmware_version varchar,
  last_update_at   timestamptz,
  created_at       timestamptz DEFAULT now(),
  updated_at       timestamptz DEFAULT now()
);

CREATE INDEX IF NOT EXISTS apiary_hubs_apiary_idx ON public.apiary_hubs(apiary_id);
CREATE INDEX IF NOT EXISTS apiary_hubs_user_idx   ON public.apiary_hubs(user_id);
CREATE INDEX IF NOT EXISTS apiary_hubs_seen_idx   ON public.apiary_hubs(last_seen DESC);

-- Sensor Unit: one ESP32 board per hive hosting multiple physical sensors
CREATE TABLE IF NOT EXISTS public.sensor_units (
  id               integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  uuid             uuid NOT NULL DEFAULT gen_random_uuid() UNIQUE,
  hive_id          integer NOT NULL REFERENCES public.hives(id) ON DELETE CASCADE,
  user_id          uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  hub_id           integer REFERENCES public.apiary_hubs(id) ON DELETE SET NULL,
  name             varchar NOT NULL,
  description      text,
  last_seen        timestamptz,
  firmware_version varchar,
  last_update_at   timestamptz,
  created_at       timestamptz DEFAULT now(),
  updated_at       timestamptz DEFAULT now()
);

CREATE INDEX IF NOT EXISTS sensor_units_hive_idx ON public.sensor_units(hive_id);
CREATE INDEX IF NOT EXISTS sensor_units_user_idx ON public.sensor_units(user_id);
CREATE INDEX IF NOT EXISTS sensor_units_hub_idx  ON public.sensor_units(hub_id);

-- Logical sensors (channels) that live on a sensor unit
CREATE TABLE IF NOT EXISTS public.sensors (
  id                 integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  uuid               uuid NOT NULL DEFAULT gen_random_uuid() UNIQUE,
  sensor_unit_id     integer REFERENCES public.sensor_units(id) ON DELETE CASCADE,
  hive_id            integer REFERENCES public.hives(id) ON DELETE CASCADE, -- convenience pointer
  user_id            uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  sensor_type        varchar NOT NULL,  -- e.g. WEIGHT, TEMPERATURE, HUMIDITY
  name               varchar,
  model              varchar,
  calibration_offset numeric DEFAULT 0,
  battery_level      integer DEFAULT 100,
  is_online          boolean DEFAULT true,
  last_reading_at    timestamptz,
  created_at         timestamptz DEFAULT now(),
  updated_at         timestamptz DEFAULT now()
);

CREATE INDEX IF NOT EXISTS sensors_unit_idx  ON public.sensors(sensor_unit_id);
CREATE INDEX IF NOT EXISTS sensors_hive_idx  ON public.sensors(hive_id);
CREATE INDEX IF NOT EXISTS sensors_user_idx  ON public.sensors(user_id);
CREATE INDEX IF NOT EXISTS sensors_type_idx  ON public.sensors(sensor_type);

-- Time-series: readings
CREATE TABLE IF NOT EXISTS public.sensor_readings (
  id              integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  sensor_id       integer NOT NULL REFERENCES public.sensors(id) ON DELETE CASCADE,
  hive_id         integer NOT NULL REFERENCES public.hives(id) ON DELETE CASCADE,
  hub_id          integer REFERENCES public.apiary_hubs(id) ON DELETE SET NULL, -- which hub relayed it
  sensor_type     varchar NOT NULL,     -- denormalized for convenience
  value           numeric NOT NULL,
  unit            varchar NOT NULL,
  reading_time    timestamptz NOT NULL DEFAULT now(),
  signal_strength integer,
  created_at      timestamptz DEFAULT now()
);

CREATE INDEX IF NOT EXISTS readings_sensor_time_idx ON public.sensor_readings(sensor_id, reading_time DESC);
CREATE INDEX IF NOT EXISTS readings_hive_time_idx   ON public.sensor_readings(hive_id, reading_time DESC);
CREATE INDEX IF NOT EXISTS readings_hub_time_idx    ON public.sensor_readings(hub_id, reading_time DESC);

-- ===========
-- Control plane (commands + telemetry)
-- ===========

-- Commands sent from API â†’ device (hub or unit). Device reports status/ACKs.
CREATE TABLE IF NOT EXISTS public.device_commands (
  id              integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  device_type     varchar NOT NULL CHECK (device_type IN ('HUB','UNIT')),
  device_id       integer NOT NULL, -- resolves via device_type
  target_sensor_id integer REFERENCES public.sensors(id) ON DELETE SET NULL,
  command_type    varchar NOT NULL,  -- e.g. OTA_UPDATE, SET_RATE, REBOOT
  payload         jsonb   NOT NULL DEFAULT '{}'::jsonb,
  status          varchar NOT NULL DEFAULT 'queued' CHECK (status IN ('queued','sent','acked','failed','expired')),
  correlation_id  varchar,
  queued_at       timestamptz NOT NULL DEFAULT now(),
  sent_at         timestamptz,
  acked_at        timestamptz,
  failed_at       timestamptz,
  failure_reason  text
);

CREATE INDEX IF NOT EXISTS device_commands_queue_idx ON public.device_commands(device_type, device_id, status, queued_at DESC);

-- Light telemetry snapshots for hubs/units (fleet health)
CREATE TABLE IF NOT EXISTS public.device_telemetry (
  id                 integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  device_type        varchar NOT NULL CHECK (device_type IN ('HUB','UNIT')),
  device_id          integer NOT NULL,
  recorded_at        timestamptz NOT NULL DEFAULT now(),
  battery_level      integer,
  rssi               integer,
  snr                integer,
  voltage            numeric,
  storage_free_bytes bigint,
  ip                 varchar,
  raw                jsonb NOT NULL DEFAULT '{}'::jsonb
);

CREATE INDEX IF NOT EXISTS device_telemetry_idx ON public.device_telemetry(device_type, device_id, recorded_at DESC);

-- ===========
-- OTA registries (publish firmware files and mark active)
-- ===========

CREATE TABLE IF NOT EXISTS public.hub_firmware (
  id               integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  version          varchar NOT NULL,
  file_url         text    NOT NULL,   -- Supabase Storage (signed URL at runtime)
  checksum_sha256  varchar,
  is_active        boolean DEFAULT true,
  description      text,
  uploaded_by      uuid REFERENCES auth.users(id),
  created_at       timestamptz DEFAULT now()
);

CREATE TABLE IF NOT EXISTS public.sensor_firmware (
  id               integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  sensor_type      varchar NOT NULL,   -- e.g. WEIGHT, TEMPERATURE
  version          varchar NOT NULL,
  file_url         text    NOT NULL,
  checksum_sha256  varchar,
  is_active        boolean DEFAULT true,
  description      text,
  uploaded_by      uuid REFERENCES auth.users(id),
  created_at       timestamptz DEFAULT now()
);

CREATE INDEX IF NOT EXISTS sensor_fw_type_active_idx ON public.sensor_firmware(sensor_type, is_active);

-- ===========
-- Optional domain (keep if you want alerting & rollups from day one)
-- ===========

CREATE TABLE IF NOT EXISTS public.alerts (
  id              integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  hive_id         integer NOT NULL REFERENCES public.hives(id) ON DELETE CASCADE,
  sensor_id       integer REFERENCES public.sensors(id) ON DELETE SET NULL,
  alert_type      varchar NOT NULL,
  severity        varchar NOT NULL,   -- e.g. info/warn/crit
  title           varchar NOT NULL,
  message         text    NOT NULL,
  threshold_value numeric,
  actual_value    numeric,
  resolved        boolean DEFAULT false,
  resolved_by     varchar,
  resolved_notes  text,
  created_at      timestamptz DEFAULT now(),
  resolved_at     timestamptz
);

CREATE INDEX IF NOT EXISTS alerts_hive_idx   ON public.alerts(hive_id, created_at DESC);
CREATE INDEX IF NOT EXISTS alerts_sensor_idx ON public.alerts(sensor_id, created_at DESC);

CREATE TABLE IF NOT EXISTS public.daily_summaries (
  id                           integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  hive_id                      integer NOT NULL REFERENCES public.hives(id) ON DELETE CASCADE,
  date                         date NOT NULL,
  avg_temperature              numeric,
  min_temperature              numeric,
  max_temperature              numeric,
  temperature_readings_count   integer DEFAULT 0,
  avg_humidity                 numeric,
  min_humidity                 numeric,
  max_humidity                 numeric,
  humidity_readings_count      integer DEFAULT 0,
  avg_weight                   numeric,
  min_weight                   numeric,
  max_weight                   numeric,
  weight_change_from_previous_day numeric,
  weight_readings_count        integer DEFAULT 0,
  total_readings               integer DEFAULT 0,
  alerts_count                 integer DEFAULT 0,
  critical_alerts_count        integer DEFAULT 0,
  created_at                   timestamptz DEFAULT now(),
  UNIQUE (hive_id, date)
);

CREATE INDEX IF NOT EXISTS daily_summaries_hive_date_idx ON public.daily_summaries(hive_id, date DESC);

COMMIT;

-- ===========================
-- RLS stubs (enable when ready)
-- ===========================
ALTER TABLE public.apiaries      ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.hives         ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.apiary_hubs   ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.sensor_units  ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.sensors       ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.sensor_readings ENABLE ROW LEVEL SECURITY;

CREATE POLICY "owner can read apiaries"     ON public.apiaries      FOR SELECT USING (user_id = auth.uid());
CREATE POLICY "owner can read hives"        ON public.hives         FOR SELECT USING (user_id = auth.uid());
CREATE POLICY "owner can read hubs"         ON public.apiary_hubs   FOR SELECT USING (user_id = auth.uid());
CREATE POLICY "owner can read units"        ON public.sensor_units  FOR SELECT USING (user_id = auth.uid());
CREATE POLICY "owner can read sensors"      ON public.sensors       FOR SELECT USING (user_id = auth.uid());
-- For readings/telemetry/commands, derive ownership via joins or use a SECURITY DEFINER RPC.
